---
- name: Validator-celestia-app | Set vars
  ansible.builtin.set_fact:
    home_dir: /home/{{ chain_celestia_user }}/.celestia-app
    service_name: appd-{{ chain_celestia_chain_id }}

- name: Validator-celestia-app | Firewall Allow Incoming on public interface
  community.general.ufw:
    rule: allow
    interface: "{{ public_interface }}"
    direction: in
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: "{{ chain_celestia_validator_app_p2p_port }}", proto: tcp }

- name: Validator-celestia-app | Check configuration file
  ansible.builtin.stat:
    path: "{{ home_dir }}/config/config.toml"
  register: node_init

- name: Validator-celestia-app | Initialize celestia-app
  when: not node_init.stat.exists # noqa: no-handler
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      source ~/.bash_profile
      celestia-appd config chain-id {{ chain_celestia_chain_id }} --home {{ home_dir }}
      celestia-appd init binary-builders --chain-id {{ chain_celestia_chain_id }} --home {{ home_dir }}
      celestia-appd download-genesis {{ chain_celestia_chain_id }} --home {{ home_dir }}
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ chain_celestia_user }}"
  changed_when: true

- name: Validator-celestia-app | enable-bbr
  when: not node_init.stat.exists # noqa: no-handler
  ansible.builtin.shell:
    chdir: /home/{{ chain_celestia_user }}/celestia-app
    cmd: |
      source ~/.bash_profile
      make enable-bbr
  args:
    executable: /bin/bash
  changed_when: true

- name: Validator-celestia-app | Create systemd service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/{{ service_name }}.service
    content: |
      [Unit]
      Description={{ service_name | capitalize }}
      After=network.target

      [Service]
      Type=simple
      ExecStart=/home/{{ chain_celestia_user }}/go/bin/celestia-appd start --home {{ home_dir }}
      User={{ chain_celestia_user }}
      Group=users
      Restart=always
      RestartSec=3
      TimeoutStartSec=900
      LimitNOFILE=1400000

      [Install]
      WantedBy=multi-user.target
    mode: "0644"
  notify: Restart {{ service_name }}

- name: Validator-celestia-app | Add sudoers file
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ chain_celestia_user }}-{{ service_name }}"
    content: |
      {{ chain_celestia_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl start {{ service_name }}.service
      {{ chain_celestia_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl stop {{ service_name }}.service
      {{ chain_celestia_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart {{ service_name }}.service
      {{ chain_celestia_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl status {{ service_name }}.service
    mode: "0440"
    validate: /usr/sbin/visudo -cf %s

- name: Validator-celestia-app | app.toml
  ansible.builtin.replace:
    path: "{{ home_dir }}/config/app.toml"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.line }}"
  notify: Restart {{ service_name }}
  loop:
    # Set gas price
    - regexp: ^(minimum-gas-prices\s*=\s*).*$
      line: \1"0.002utia"
    # Tendermint block pruning
    - regexp: ^(pruning\s*=\s*).*$
      line: \1"custom"
    - regexp: ^(pruning-keep-recent\s*=\s*).*$
      line: \1"100"
    - regexp: ^(pruning-keep-every\s*=\s*).*$
      line: \1"0"
    - regexp: ^(pruning-interval\s*=\s*).*$
      line: \1"10"
    - regexp: ^(pruning-keep-every\s*=\s*).*$
      line: \1"0"
    - regexp: ^(min-retain-blocks\s*=\s*).*$
      line: \1"1000"
  become: true
  become_user: "{{ chain_celestia_user }}"

- name: Validator-celestia-app | config.toml
  ansible.builtin.replace:
    path: "{{ home_dir }}/config/config.toml"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.line }}"
  notify: Restart {{ service_name }}
  loop:
    # Listen on 0.0.0.0 (RPC)
    - regexp: (^\[rpc\]\n\n# TCP or UNIX socket address for the RPC server to listen on\n)laddr = "tcp://[^"]*"
      line: \1laddr = "tcp://0.0.0.0:{{ chain_celestia_validator_app_rpc_port }}"
    # Listen on 0.0.0.0 (P2P)
    - regexp: (^\[p2p\]\n\n# Address to listen for incoming connections\n)laddr = "tcp://[^"]*"
      line: \1laddr = "tcp://0.0.0.0:{{ chain_celestia_validator_app_p2p_port }}"
    # Set seeds
    - regexp: ^(seeds\s*=\s*).*$
      line: \1"{{ chain_celestia_validator_app_seeds }}"
    # Enable prometheus
    - regexp: ^(prometheus\s*=\s*).*$
      line: \1true
    # Listen on 0.0.0.0 (Prometheus)
    - regexp: ^(prometheus_listen_addr\s*=\s*).*$
      line: \1":{{ chain_celestia_validator_app_prometheus_port }}"
    # Discard abci responses (saves disk space)
    - regexp: ^(discard_abci_responses\s*=\s*).*$
      line: \1true
    - regexp: ^(ttl-num-blocks\s*=\s*).*$
      line: \1"12"
  become: true
  become_user: "{{ chain_celestia_user }}"

- name: Validator-celestia-app | config.toml | Set persistent peers
  when: chain_celestia_validator_app_peers is defined # noqa: no-handler
  ansible.builtin.replace:
    path: "{{ home_dir }}/config/config.toml"
    regexp: ^(persistent_peers\s*=\s*).*$
    replace: \1"{{ chain_celestia_validator_app_seeds }}"
  become: true
  become_user: "{{ chain_celestia_user }}"
  notify: Restart {{ service_name }}

- name: Validator-celestia-app | Enable systemd service
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    enabled: true
    state: started
    daemon_reload: true
