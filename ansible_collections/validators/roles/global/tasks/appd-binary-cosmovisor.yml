---
- name: Binary | Check if cosmovisor wanted version is installed
  ansible.builtin.shell: |
    source /home/{{ global_user }}/.bash_profile
    cosmovisor version
  args:
    executable: /bin/bash
  register: check_cosmovisor
  failed_when: false
  changed_when: false

- name: Binary | Install cosmovisor {{ global_cosmovisor_version }}
  when: global_cosmovisor_version not in check_cosmovisor.stderr
  ansible.builtin.shell:
    cmd: |
      source ~/.bash_profile
      nice -n 19 go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@{{ global_cosmovisor_version }}
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ global_user }}"
  changed_when: true

- name: Binary | Check if cosmovisor is already initiated
  ansible.builtin.stat:
    path: "{{ global_home_dir }}/cosmovisor/config.toml"
  register: cosmovisor_init

- name: Binary | .bash_profile
  ansible.builtin.blockinfile:
    path: /home/{{ global_user }}/.bash_profile
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Cosmovisor"
    block: |
      export DAEMON_NAME={{ global_appd_name }}
      export DAEMON_HOME={{ global_home_dir }}
      export DAEMON_ALLOW_DOWNLOAD_BINARIES=false
      export DAEMON_LOG_BUFFER_SIZE=512
      export DAEMON_RESTART_AFTER_UPGRADE=true
      export UNSAFE_SKIP_BACKUP=true

- name: Fish config
  ansible.builtin.copy:
    dest: ~/.config/fish/conf.d/{{ global_appd_name }}.fish
    content: |
      set -x DAEMON_NAME {{ global_appd_name }}
      set -x DAEMON_HOME {{ global_home_dir }}
      set -x DAEMON_ALLOW_DOWNLOAD_BINARIES false
      set -x DAEMON_LOG_BUFFER_SIZE 512
      set -x DAEMON_RESTART_AFTER_UPGRADE true
      set -x UNSAFE_SKIP_BACKUP true
    mode: "644"
  become: true
  become_user: "{{ global_user }}"

- name: Binary | Ensure Binary repository is present
  ansible.builtin.git:
    repo: "{{ global_appd_repo_url }}"
    dest: "/home/{{ global_user }}/appd_repo"
    version: "tags/{{ global_appd_version }}"
  become: true
  become_user: "{{ global_user }}"
  register: repo_cloned

- name: Binary | Build and install
  when: repo_cloned.changed # noqa: no-handler
  ansible.builtin.shell:
    chdir: /home/{{ global_user }}/appd_repo
    cmd: |
      source ~/.bash_profile
      nice -n 19 make install
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ global_user }}"
  changed_when: true

- name: Binary | Initialize Cosmovisor
  when: not cosmovisor_init.stat.exists # noqa: no-handler
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      source ~/.bash_profile
      cosmovisor init $HOME/go/bin/{{ global_appd_name }}
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ global_user }}"
  changed_when: true

- name: Binary | Create cosmovisor update directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
    mode: "0755"
    owner: "{{ global_user }}"
    group: users
  become: true
  become_user: "{{ global_user }}"
  loop:
    - "{{ global_home_dir }}/cosmovisor/upgrades/{{ global_cosmovisor_upgrade_name }}"
    - "{{ global_home_dir }}/cosmovisor/upgrades/{{ global_cosmovisor_upgrade_name }}/bin"

- name: Binary | Copy binary to cosmovisor update directory
  ansible.builtin.copy:
    src: /home/{{ global_user }}/go/bin/{{ global_appd_name }}
    dest: "{{ global_home_dir }}/cosmovisor/upgrades/{{ global_cosmovisor_upgrade_name }}/bin/{{ global_appd_name }}"
    mode: "755"
    remote_src: true
  become: true
  become_user: "{{ global_user }}"

- name: Binary | Create systemd service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/appd-{{ global_chain_id }}.service
    content: |
      [Unit]
      Description={{ global_appd_name }} {{ global_network }} (chain_id: {{ global_chain_id }}) (Validator)
      After=network.target

      [Service]
      Type=simple
      ExecStart=/home/{{ global_user }}/go/bin/cosmovisor run start
      User={{ global_user }}
      Group=users
      Restart=always
      RestartSec=3
      TimeoutStartSec=900
      LimitNOFILE=1400000
      Environment="DAEMON_NAME={{ global_appd_name }}"
      Environment="DAEMON_HOME={{ global_home_dir }}"
      Environment="DAEMON_LOG_BUFFER_SIZE=512"
      Environment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"
      Environment="DAEMON_RESTART_AFTER_UPGRADE=true"
      Environment="UNSAFE_SKIP_BACKUP=true"

      [Install]
      WantedBy=multi-user.target
    mode: "0644"
  notify: Restart appd-{{ global_chain_id }}

- name: Binary | Enable systemd service
  ansible.builtin.systemd:
    name: "appd-{{ global_chain_id }}"
    enabled: true
    daemon_reload: true

- name: Binary | Add sudoers file
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ global_user }}-appd-{{ global_chain_id }}"
    content: |
      {{ global_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl start appd-{{ global_chain_id }}.service
      {{ global_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl stop appd-{{ global_chain_id }}.service
      {{ global_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart appd-{{ global_chain_id }}.service
      {{ global_user }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl status appd-{{ global_chain_id }}.service
    mode: "0440"
    validate: /usr/sbin/visudo -cf %s
